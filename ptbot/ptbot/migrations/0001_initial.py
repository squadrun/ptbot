# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2017-10-07 17:32
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text=b'Object creation date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text=b'Object updation date')),
                ('id', models.PositiveIntegerField(help_text=b'Account ID on PT', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b'Account name on PT', max_length=64)),
                ('plan', models.CharField(help_text=b'Account plan', max_length=16)),
                ('status', models.CharField(help_text=b'Account status', max_length=16)),
                ('created_on', models.DateTimeField(help_text=b'Date and time when this account was created')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text=b'Object creation date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text=b'Object updation date')),
                ('id', models.PositiveIntegerField(help_text=b"Person's ID on PT", primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b"Person's name on PT", max_length=64)),
                ('username', models.CharField(help_text=b"Person's username on PT", max_length=64)),
                ('email', models.EmailField(help_text=b"Person's email ID on PT", max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text=b'Object creation date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text=b'Object updation date')),
                ('id', models.PositiveIntegerField(help_text=b'Project ID on PT', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b'Project name on PT', max_length=64)),
                ('project_type', models.CharField(help_text=b'Type of the project', max_length=16)),
                ('timezone_olson_name', models.CharField(help_text=b'Project timezone olson name', max_length=32)),
                ('timezone_offset', models.CharField(help_text=b'Project timezone offset', max_length=16)),
                ('iteration_length', models.PositiveSmallIntegerField(help_text=b'Length of a single iteration for this project')),
                ('iterations_done', models.PositiveSmallIntegerField(help_text=b'Number of iterations done in this project')),
                ('current_iteration', models.PositiveSmallIntegerField(help_text=b'Current iteration number for this project')),
                ('created_on', models.DateTimeField(help_text=b'Date and time when this project was created')),
                ('account', models.ForeignKey(help_text=b'Account ID under which this project exists', on_delete=django.db.models.deletion.CASCADE, to='ptbot.Account')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text=b'Object creation date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text=b'Object updation date')),
                ('id', models.PositiveIntegerField(help_text=b'Story ID on PT', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text=b'Story title on PT', max_length=256)),
                ('description', models.TextField(help_text=b'Story description on PT')),
                ('story_type', models.CharField(help_text=b'Type of the story', max_length=16)),
                ('story_url', models.URLField(help_text=b'PT URL for the story')),
                ('owners', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), help_text=b'Persons who own this story', size=None)),
                ('estimate', models.PositiveSmallIntegerField(blank=True, help_text=b'Story point estimation of the story', null=True)),
                ('current_state', models.CharField(help_text=b'Current status of the story', max_length=16)),
                ('labels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), help_text=b'Labels applied on the story', size=None)),
                ('created_on', models.DateTimeField(help_text=b'Date and Time when the story was created')),
                ('updated_on', models.DateTimeField(help_text=b'Date and Time when the story was updated')),
                ('accepted_on', models.DateTimeField(blank=True, help_text=b'Date and Time when the story was accpeted', null=True)),
                ('project', models.ForeignKey(help_text=b'Project to which this story belongs', on_delete=django.db.models.deletion.CASCADE, to='ptbot.Project')),
                ('requestor', models.ForeignKey(help_text=b'Person who has requested this story', on_delete=django.db.models.deletion.CASCADE, to='ptbot.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
